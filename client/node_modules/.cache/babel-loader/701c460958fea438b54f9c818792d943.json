{"ast":null,"code":"var _jsxFileName = \"/workspace/MERN/TechUnite/Dev-Social-Platform-Project-MERN-Stack/client/src/components/Post/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getPost, deleteComment } from \"../../actions/post\";\nimport Spinner from \"../Layout/Spinner\";\nimport PostItem from \"../Posts/PostItem\";\nimport { Link } from \"react-router-dom\";\nimport CommentForm from \"./CommentForm\";\nimport CommentItem from \"./CommentItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = ({\n  getPost,\n  match,\n  post: {\n    post,\n    loading\n  }\n}) => {\n  _s();\n\n  useEffect(() => {\n    getPost(match.params.id);\n  }, [getPost]); // \tIf post exists and loading is done render the PostItem component and send the post data and set showActions to false\n  // \tthe props showActions is used in the postItem component to conditionally render parts of the component\n  // \tWe loop through the post comments and render a CommentItem component for each comment\n  // \tWe send props with comment data and postId to each CommentItem component\n\n  return loading || post === null ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 36\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      className: \"btn\",\n      to: \"/posts\",\n      children: \"Back To Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(PostItem, {\n      post: post,\n      showActions: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      postId: post._id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: post.comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        postId: post._id\n      }, comment._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Post, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Post;\n\nconst mapStateToProps = state => ({\n  post: state.post\n});\n\nPost.propTypes = {\n  getPost: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, {\n  getPost\n})(Post);\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/workspace/MERN/TechUnite/Dev-Social-Platform-Project-MERN-Stack/client/src/components/Post/Post.js"],"names":["React","Fragment","useEffect","PropTypes","connect","getPost","deleteComment","Spinner","PostItem","Link","CommentForm","CommentItem","Post","match","post","loading","params","id","_id","comments","map","comment","mapStateToProps","state","propTypes","func","isRequired","object"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,oBAAvC;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAGA,MAAMC,IAAI,GAAG,CAAC;AAAEP,EAAAA,OAAF;AAAWQ,EAAAA,KAAX;AAAkBC,EAAAA,IAAI,EAAE;AAACA,IAAAA,IAAD;AAAOC,IAAAA;AAAP;AAAxB,CAAD,KAA+C;AAAA;;AAE3Db,EAAAA,SAAS,CAAC,MAAM;AACfG,IAAAA,OAAO,CAACQ,KAAK,CAACG,MAAN,CAAaC,EAAd,CAAP;AAEA,GAHQ,EAGN,CAACZ,OAAD,CAHM,CAAT,CAF2D,CAM5D;AACA;AACA;AACA;;AACC,SAAOU,OAAO,IAAID,IAAI,KAAK,IAApB,gBAA2B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAA3B,gBACN,QAAC,QAAD;AAAA,4BACC,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,KAAhB;AAAsB,MAAA,EAAE,EAAC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC,QAAC,QAAD;AAAU,MAAA,IAAI,EAAIA,IAAlB;AAAwB,MAAA,WAAW,EAAE;AAArC;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC,QAAC,WAAD;AAAa,MAAA,MAAM,EAAEA,IAAI,CAACI;AAA1B;AAAA;AAAA;AAAA;AAAA,YAHD,eAIC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,gBACEJ,IAAI,CAACK,QAAL,CAAcC,GAAd,CAAkBC,OAAO,iBACzB,QAAC,WAAD;AAA+B,QAAA,OAAO,EAAEA,OAAxC;AAAiD,QAAA,MAAM,EAAEP,IAAI,CAACI;AAA9D,SAAkBG,OAAO,CAACH,GAA1B;AAAA;AAAA;AAAA;AAAA,cADA;AADF;AAAA;AAAA;AAAA;AAAA,YAJD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAWE,CArBH;;GAAMN,I;;KAAAA,I;;AAuBN,MAAMU,eAAe,GAAGC,KAAK,KAAK;AACjCT,EAAAA,IAAI,EAAES,KAAK,CAACT;AADqB,CAAL,CAA7B;;AAIAF,IAAI,CAACY,SAAL,GAAiB;AAChBnB,EAAAA,OAAO,EAAEF,SAAS,CAACsB,IAAV,CAAeC,UADR;AAEhBZ,EAAAA,IAAI,EAAEX,SAAS,CAACwB,MAAV,CAAiBD;AAFP,CAAjB;AAMA,eAAetB,OAAO,CAACkB,eAAD,EAAkB;AAACjB,EAAAA;AAAD,CAAlB,CAAP,CAAoCO,IAApC,CAAf","sourcesContent":["import React, {Fragment, useEffect} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport { getPost, deleteComment } from \"../../actions/post\"\nimport Spinner from \"../Layout/Spinner\"\nimport PostItem from \"../Posts/PostItem\"\nimport {Link} from \"react-router-dom\"\nimport CommentForm from \"./CommentForm\"\nimport CommentItem from \"./CommentItem\"\n\n\nconst Post = ({ getPost, match, post: {post, loading} }) => {\n\t\n\tuseEffect(() => {\n\t\tgetPost(match.params.id)\n\t\t\n\t}, [getPost])\n// \tIf post exists and loading is done render the PostItem component and send the post data and set showActions to false\n// \tthe props showActions is used in the postItem component to conditionally render parts of the component\n// \tWe loop through the post comments and render a CommentItem component for each comment\n// \tWe send props with comment data and postId to each CommentItem component\n\treturn loading || post === null ? <Spinner /> : (\n\t\t<Fragment>\n\t\t\t<Link className=\"btn\" to=\"/posts\">Back To Posts</Link>\n\t\t\t<PostItem post = {post} showActions={false} />\n\t\t\t<CommentForm postId={post._id} />\n\t\t\t<div className=\"comments\">\n\t\t\t\t{post.comments.map(comment => (\n\t\t\t\t\t<CommentItem key={comment._id} comment={comment} postId={post._id}/>\t\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</Fragment>\n\t)}\n\nconst mapStateToProps = state => ({\n\tpost: state.post\n})\n\nPost.propTypes = {\n\tgetPost: PropTypes.func.isRequired,\n\tpost: PropTypes.object.isRequired\n}\n\n\nexport default connect(mapStateToProps, {getPost})(Post)"]},"metadata":{},"sourceType":"module"}