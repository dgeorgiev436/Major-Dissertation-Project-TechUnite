{"ast":null,"code":"import axios from \"axios\";\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from \"./types\";\nimport { setAlert } from \"./alert\"; // GET posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts\");\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // ADD A LIKE\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // REMOVE A LIKE\n\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // DELETE POST\n\nexport const deletePost = postId => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/${postId}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: postId\n    });\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // ADD POST\n\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // GET POST\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // ADD COMMENT\n\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // DELETE COMMENT\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/comment/${postId}/${commentId}`); // \t\tsend payload with the removed comment id in order to update the state\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/workspace/MERN/TechUnite/Dev-Social-Platform-Project-MERN-Stack/client/src/actions/post.js"],"names":["axios","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","setAlert","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","postId","put","likes","removeLike","deletePost","delete","addPost","formData","config","headers","post","getPost","id","addComment","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT} from \"./types\"\nimport {setAlert} from \"./alert\"\n\n// GET posts\nexport const getPosts = () => async dispatch => {\n\t\n\ttry{\n\t\tconst res = await axios.get(\"/api/posts\");\n\n\t\tdispatch({\n\t\t\ttype: GET_POSTS,\n\t\t\tpayload: res.data\n\t\t})\n\t\t\n\t}catch(err){\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: err.response.statusText, status: err.response.status }\n\t\t})\n\t}\n}\n\n// ADD A LIKE\nexport const addLike = (postId) => async dispatch => {\n\ttry{\n\t\tconst res = await axios.put(`/api/posts/like/${postId}`);\n\t\t \n\t\tdispatch({\n\t\t\ttype: UPDATE_LIKES,\n\t\t\tpayload: {postId, likes: res.data}\n\t\t})\n\t\t\n\t}catch(err){\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: err.response.statusText, status: err.response.status }\n\t\t})\n\t}\n}\n\n// REMOVE A LIKE\nexport const removeLike = (postId) => async dispatch => {\n\ttry{\n\t\tconst res = await axios.put(`/api/posts/unlike/${postId}`);\n\t\t \n\t\tdispatch({\n\t\t\ttype: UPDATE_LIKES,\n\t\t\tpayload: {postId, likes: res.data}\n\t\t})\n\t\t\n\t}catch(err){\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: err.response.statusText, status: err.response.status }\n\t\t})\n\t}\n}\n\n// DELETE POST\nexport const deletePost = (postId) => async dispatch => {\n\ttry{\n\t\t\n\t\tconst res = await axios.delete(`/api/posts/${postId}`)\n\t\t\n\t\tdispatch({\n\t\t\ttype: DELETE_POST,\n\t\t\tpayload: postId\n\t\t})\n\t\t\n\t\tdispatch(setAlert(\"Post Removed\", \"success\"))\n\t\t\n\t\t\n\t}catch(err){\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: err.response.statusText, status: err.response.status }\n\t\t})\n\t}\n}\n\n// ADD POST\nexport const addPost = (formData) => async dispatch => {\n\t\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t}\n\t}\n\t\n\ttry{\n\t\tconst res = await axios.post(\"/api/posts\", formData, config);\n\t\t\n\t\tdispatch({\n\t\t\ttype: ADD_POST,\n\t\t\tpayload: res.data\n\t\t})\n\t\t\n\t\tdispatch(setAlert(\"Post Created\", \"success\"))\n\t\t\n\t}catch(err){\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: err.response.statusText, status: err.response.status }\n\t\t})\n\t}\n}\n\n// GET POST\nexport const getPost = (id) => async dispatch => {\n\t\n\ttry{\n\t\tconst res = await axios.get(`/api/posts/${id}`);\n\t\t\n\t\tdispatch({\n\t\t\ttype: GET_POST,\n\t\t\tpayload: res.data\n\t\t})\n\t\t\n\t}catch(err){\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: err.response.statusText, status: err.response.status }\n\t\t})\n\t}\n}\n\n// ADD COMMENT\nexport const addComment = (postId, formData) => async dispatch => {\n\t\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t}\n\t}\n\t\n\ttry{\n\t\t\n\t\tconst res = await axios.post(`/api/posts/comment/${postId}`, formData, config)\n\t\t\n\t\tdispatch({\n\t\t\ttype: ADD_COMMENT,\n\t\t\tpayload: res.data\n\t\t})\n\t\t\n\t\tdispatch(setAlert(\"Comment Added\", \"success\"))\n\t\t\n\t}catch(err){\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: err.response.statusText, status: err.response.status }\n\t\t})\n\t}\n}\n\n// DELETE COMMENT\nexport const deleteComment = (postId, commentId) => async dispatch => {\n\t\n\ttry{\n\t\t\n\t\tconst res = await axios.delete(`/api/posts/comment/${postId}/${commentId}`)\n\t\t\n// \t\tsend payload with the removed comment id in order to update the state\n\t\tdispatch({\n\t\t\ttype: REMOVE_COMMENT,\n\t\t\tpayload: commentId\n\t\t})\n\t\t\n\t\tdispatch(setAlert(\"Comment Removed\", \"success\"))\n\t\t\n\t}catch(err){\n\t\t\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: err.response.statusText, status: err.response.status }\n\t\t})\n\t}\n}"]},"metadata":{},"sourceType":"module"}