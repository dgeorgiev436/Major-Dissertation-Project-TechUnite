{"ast":null,"code":"var _jsxFileName = \"/workspace/MERN/TechUnite/Dev-Social-Platform-Project-MERN-Stack/client/src/components/Profiles/Profiles.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../Layout/Spinner\";\nimport ProfileItem from \"./ProfileItem\";\nimport { connect } from \"react-redux\";\nimport { getProfiles } from \"../../actions/profile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profiles = ({\n  profile: {\n    profiles,\n    loading\n  },\n  getProfiles\n}) => {\n  _s();\n\n  useEffect(() => {\n    getProfiles();\n  }, [getProfiles]);\n  return (\n    /*#__PURE__*/\n    // \t\tCheck if the \"get all profiles\" action is completed\n    // \t\tIf it is we render JSX elements, we loop through all profiles in the profiles state and we send each profile data through props to the ProfileItem component which we render\n    _jsxDEV(Fragment, {\n      children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 16\n      }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"large text-primary\",\n          children: \"Developers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"lead\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fab fa-connectdevelop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 25\n          }, this), \" Browse and communicate with developers\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profiles\",\n          children: profiles.length > 0 ? profiles.map(profile => {\n            return /*#__PURE__*/_jsxDEV(ProfileItem, {\n              profile: profile\n            }, profile._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 15\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"No profiles found...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 3\n    }, this)\n  );\n};\n\n_s(Profiles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Profiles;\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, {\n  getProfiles\n})(Profiles);\n\nvar _c;\n\n$RefreshReg$(_c, \"Profiles\");","map":{"version":3,"sources":["/workspace/MERN/TechUnite/Dev-Social-Platform-Project-MERN-Stack/client/src/components/Profiles/Profiles.js"],"names":["React","Fragment","useEffect","PropTypes","Spinner","ProfileItem","connect","getProfiles","Profiles","profile","profiles","loading","length","map","_id","mapStateToProps","state","propTypes","func","isRequired","object"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,uBAA5B;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAO,EAAE;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAX;AAAgCJ,EAAAA;AAAhC,CAAD,KAAmD;AAAA;;AAEnEL,EAAAA,SAAS,CAAC,MAAM;AAEfK,IAAAA,WAAW;AAEX,GAJQ,EAIN,CAACA,WAAD,CAJM,CAAT;AAOA;AAAA;AACD;AACA;AACE,YAAC,QAAD;AAAA,gBACGI,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAiB,QAAC,QAAD;AAAA,gCACxB;AAAI,UAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADwB,eAEzB;AAAA;AAAA;AAAA;AAAA,gBAFyB,eAGzB;AAAG,UAAA,SAAS,EAAC,MAAb;AAAA,kCAAoB;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,kBAApB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHyB,eAIzB;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,oBACED,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GACAF,QAAQ,CAACG,GAAT,CAAaJ,OAAO,IAAI;AACvB,gCAAO,QAAC,WAAD;AAA+B,cAAA,OAAO,EAAEA;AAAxC,eAAkBA,OAAO,CAACK,GAA1B;AAAA;AAAA;AAAA;AAAA,oBAAP;AACA,WAFD,CADA,gBAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALL;AAAA;AAAA;AAAA;AAAA,gBAJyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAD3B;AAAA;AAAA;AAAA;AAAA;AAHD;AAkBA,CA3BD;;GAAMN,Q;;KAAAA,Q;;AA6BN,MAAMO,eAAe,GAAGC,KAAK,KAAK;AACjCP,EAAAA,OAAO,EAAEO,KAAK,CAACP;AADkB,CAAL,CAA7B;;AAIAD,QAAQ,CAACS,SAAT,GAAqB;AACpBV,EAAAA,WAAW,EAAEJ,SAAS,CAACe,IAAV,CAAeC,UADR;AAEpBV,EAAAA,OAAO,EAAEN,SAAS,CAACiB,MAAV,CAAiBD;AAFN,CAArB;AAKA,eAAeb,OAAO,CAACS,eAAD,EAAkB;AAACR,EAAAA;AAAD,CAAlB,CAAP,CAAwCC,QAAxC,CAAf","sourcesContent":["import React, {Fragment, useEffect} from \"react\"\nimport PropTypes from \"prop-types\"\nimport Spinner from \"../Layout/Spinner\"\nimport ProfileItem from \"./ProfileItem\"\nimport { connect } from \"react-redux\"\nimport { getProfiles } from \"../../actions/profile\"\n\nconst Profiles = ({ profile: {profiles, loading}, getProfiles }) => {\n\t\n\tuseEffect(() => {\n\t\t\n\t\tgetProfiles();\n\t\t\n\t}, [getProfiles])\n\t\n\t\n\treturn(\n// \t\tCheck if the \"get all profiles\" action is completed\n// \t\tIf it is we render JSX elements, we loop through all profiles in the profiles state and we send each profile data through props to the ProfileItem component which we render\n\t\t<Fragment>\n\t\t\t{ loading ? <Spinner /> : <Fragment>\n\t\t\t \t<h1 className=\"large text-primary\">Developers</h1>\n\t\t\t\t<hr></hr>\n\t\t\t\t<p className=\"lead\"><i className=\"fab fa-connectdevelop\"></i> Browse and communicate with developers</p>\n\t\t\t\t<div className=\"profiles\">\n\t\t\t\t\t{profiles.length > 0 ? (\n\t\t\t\t\t\tprofiles.map(profile => {\n\t\t\t\t\t\t\treturn <ProfileItem key={profile._id} profile={profile} />\n\t\t\t\t\t\t})\n\t\t\t\t\t) : <h4>No profiles found...</h4>}\n\t\t\t\t</div>\n\t\t\t </Fragment> }\n\t\t</Fragment>\n\t)\n}\n\nconst mapStateToProps = state => ({\n\tprofile: state.profile\n})\n\nProfiles.propTypes = {\n\tgetProfiles: PropTypes.func.isRequired,\n\tprofile: PropTypes.object.isRequired\n}\n\nexport default connect(mapStateToProps, {getProfiles})(Profiles);"]},"metadata":{},"sourceType":"module"}