{"ast":null,"code":"import axios from \"axios\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from \"./types\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from \"../utils/setAuthToken\"; // LOAD USER\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // REGISTER USER\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    }); // \t\tLoad user immediatelly after register\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // LOGIN USER\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    }); // \t\tLoad user immediatelly after login\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // LOGOUT USER\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/workspace/MERN/TechUnite/Dev-Social-Platform-Project-MERN-Stack/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport {REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE} from \"./types\"\nimport {setAlert} from \"./alert\"\nimport setAuthToken from \"../utils/setAuthToken\"\n\n\n// LOAD USER\nexport const loadUser = () => async dispatch => {\n\tif(localStorage.token){\n\t\tsetAuthToken(localStorage.token)\n\t}\n\t\n\ttry{\n\t\tconst res = await axios.get(\"/api/auth\")\n\t\t\n\t\tdispatch({\n\t\t\ttype: USER_LOADED,\n\t\t\tpayload: res.data\n\t\t})\n\t}catch(err){\n\t\tdispatch({\n\t\t\ttype: AUTH_ERROR\n\t\t})\n\t}\n}\n\n\n// REGISTER USER\nexport const register = ({name, email, password}) => async dispatch => {\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t}\n\t}\n\tconst body = JSON.stringify({name,email,password})\n\t\n\ttry{\n\t\tconst res = await axios.post(\"/api/users\",body, config)\n\t\t\n\t\tdispatch({\n\t\t\ttype: REGISTER_SUCCESS,\n\t\t\tpayload: res.data\n\t\t})\n// \t\tLoad user immediatelly after register\n\t\tdispatch(loadUser())\n\t}catch(err){\n\t\tconst errors = err.response.data.errors;\n\t\t\n\t\tif(errors){\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, \"danger\")))\n\t\t}\n\t\t\n\t\tdispatch({\n\t\t\ttype: REGISTER_FAIL\n\t\t})\n\t}\n\t\n}\n\n\n// LOGIN USER\nexport const login = (email, password) => async dispatch => {\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t}\n\t}\n\tconst body = JSON.stringify({email,password})\n\t\n\ttry{\n\t\tconst res = await axios.post(\"/api/auth\",body, config)\n\t\t\n\t\tdispatch({\n\t\t\ttype: LOGIN_SUCCESS,\n\t\t\tpayload: res.data\n\t\t})\n// \t\tLoad user immediatelly after login\n\t\tdispatch(loadUser())\n\t}catch(err){\n\t\tconst errors = err.response.data.errors;\n\t\t\n\t\tif(errors){\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, \"danger\")))\n\t\t}\n\t\t\n\t\tdispatch({\n\t\t\ttype: LOGIN_FAIL\n\t\t})\n\t}\n\t\n}\n\n// LOGOUT USER\nexport const logout = () => dispatch => {\n\tdispatch({\n\t\ttype: CLEAR_PROFILE\n\t})\n\t\n\tdispatch({\n\t\ttype: LOGOUT\n\t})\n\t\n}"]},"metadata":{},"sourceType":"module"}