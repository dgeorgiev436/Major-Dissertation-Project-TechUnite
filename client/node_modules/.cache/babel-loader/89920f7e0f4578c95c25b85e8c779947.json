{"ast":null,"code":"import { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from \"../actions/types\";\nconst initialState = {\n  post: null,\n  posts: [],\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n    // \t\t\tLIKE AND DISLIKE POST REDUCER\n\n    case UPDATE_LIKES:\n      return { ...state,\n        // \t\t\t\tMap trough all post and find the one that we are updating, return the post data and only change the likes array.\n        posts: state.posts.map(post => post._id === payload.postId ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/workspace/MERN/TechUnite/Dev-Social-Platform-Project-MERN-Stack/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","post","posts","loading","error","state","action","type","payload","filter","_id","comments","comment","map","postId","likes"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,UAAnB,EAA+BC,YAA/B,EAA6CC,WAA7C,EAA0DC,QAA1D,EAAoEC,QAApE,EAA8EC,WAA9E,EAA2FC,cAA3F,QAAgH,kBAAhH;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,IAAI,EAAE,IADc;AAEpBC,EAAAA,KAAK,EAAE,EAFa;AAGpBC,EAAAA,OAAO,EAAE,IAHW;AAIpBC,EAAAA,KAAK,EAAE;AAJa,CAArB;AAOA,eAAe,UAASC,KAAK,GAAGL,YAAjB,EAA+BM,MAA/B,EAAsC;AACpD,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBF,MAAxB;;AAEA,UAAOC,IAAP;AACC,SAAKf,SAAL;AACC,aAAO,EAAC,GAAGa,KAAJ;AAAWH,QAAAA,KAAK,EAAEM,OAAlB;AAA2BL,QAAAA,OAAO,EAAE;AAApC,OAAP;;AACD,SAAKN,QAAL;AACC,aAAO,EAAC,GAAGQ,KAAJ;AAAWJ,QAAAA,IAAI,EAAEO,OAAjB;AAA0BL,QAAAA,OAAO,EAAE;AAAnC,OAAP;;AACD,SAAKP,QAAL;AACC,aAAO,EAAC,GAAGS,KAAJ;AAAWH,QAAAA,KAAK,EAAE,CAACM,OAAD,EAAU,GAAGH,KAAK,CAACH,KAAnB,CAAlB;AAA6CC,QAAAA,OAAO,EAAE;AAAtD,OAAP;;AACD,SAAKR,WAAL;AACC,aAAO,EAAC,GAAGU,KAAJ;AAAWH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACS,GAAL,KAAaF,OAAxC,CAAlB;AAAoEL,QAAAA,OAAO,EAAE;AAA7E,OAAP;;AACD,SAAKL,WAAL;AACC,aAAO,EAAC,GAAGO,KAAJ;AAAWJ,QAAAA,IAAI,EAAE,EAAC,GAAGI,KAAK,CAACJ,IAAV;AAAgBU,UAAAA,QAAQ,EAAEH;AAA1B,SAAjB;AAAsDL,QAAAA,OAAO,EAAE;AAA/D,OAAP;;AACD,SAAKJ,cAAL;AACC,aAAO,EAAC,GAAGM,KAAJ;AAAWJ,QAAAA,IAAI,EAAE,EAAC,GAAGI,KAAK,CAACJ,IAAV;AAAgBU,UAAAA,QAAQ,EAAEN,KAAK,CAACJ,IAAN,CAAWU,QAAX,CAAoBF,MAApB,CAA2BG,OAAO,IAAIA,OAAO,CAACF,GAAR,KAAgBF,OAAtD;AAA1B,SAAjB;AAA4GL,QAAAA,OAAO,EAAE;AAArH,OAAP;;AACD,SAAKV,UAAL;AACC,aAAO,EAAC,GAAGY,KAAJ;AAAWD,QAAAA,KAAK,EAAEI,OAAlB;AAA2BL,QAAAA,OAAO,EAAE;AAApC,OAAP;AACH;;AACE,SAAKT,YAAL;AACC,aAAO,EACN,GAAGW,KADG;AAEV;AACIH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYW,GAAZ,CAAgBZ,IAAI,IAAIA,IAAI,CAACS,GAAL,KAAaF,OAAO,CAACM,MAArB,GAA8B,EAAC,GAAGb,IAAJ;AAAUc,UAAAA,KAAK,EAAEP,OAAO,CAACO;AAAzB,SAA9B,GAAgEd,IAAxF,CAHD;AAINE,QAAAA,OAAO,EAAE;AAJH,OAAP;;AAMD;AACC,aAAOE,KAAP;AAxBF;AA0BA","sourcesContent":["import {GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT} from \"../actions/types\"\n\nconst initialState = {\n\tpost: null,\n\tposts: [],\n\tloading: true,\n\terror: {}\n}\n\nexport default function(state = initialState, action){\n\tconst {type, payload} = action;\n\t\n\tswitch(type){\n\t\tcase GET_POSTS:\n\t\t\treturn {...state, posts: payload, loading: false};\n\t\tcase GET_POST:\n\t\t\treturn {...state, post: payload, loading: false}\n\t\tcase ADD_POST:\n\t\t\treturn {...state, posts: [payload, ...state.posts], loading: false}\t\n\t\tcase DELETE_POST:\n\t\t\treturn {...state, posts: state.posts.filter(post => post._id !== payload), loading: false}\n\t\tcase ADD_COMMENT:\n\t\t\treturn {...state, post: {...state.post, comments: payload }, loading: false};\n\t\tcase REMOVE_COMMENT:\n\t\t\treturn {...state, post: {...state.post, comments: state.post.comments.filter(comment => comment._id !== payload)}, loading: false }\n\t\tcase POST_ERROR:\n\t\t\treturn {...state, error: payload, loading: false};\n// \t\t\tLIKE AND DISLIKE POST REDUCER\n\t\tcase UPDATE_LIKES:\n\t\t\treturn {\n\t\t\t\t...state,\n// \t\t\t\tMap trough all post and find the one that we are updating, return the post data and only change the likes array.\n\t\t\t\tposts: state.posts.map(post => post._id === payload.postId ? {...post, likes: payload.likes} : post),\n\t\t\t\tloading: false\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}"]},"metadata":{},"sourceType":"module"}