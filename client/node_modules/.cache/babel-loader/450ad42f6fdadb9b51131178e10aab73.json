{"ast":null,"code":"var _jsxFileName = \"/workspace/MERN/TechUnite/Dev-Social-Platform-Project-MERN-Stack/client/src/components/Routing/PrivateRoute.js\";\n// A function component that checks if user is authenticated\n// Will be used on protected Routes\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\"; // Get Component from props\n// ...rest takes anything else passed in \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  auth: {\n    loading,\n    isAuthenticated\n  },\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, { ...rest,\n  render: props => !isAuthenticated && !loading ? /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 68\n  }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 96\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 2\n}, this);\n\n_c = PrivateRoute;\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/workspace/MERN/TechUnite/Dev-Social-Platform-Project-MERN-Stack/client/src/components/Routing/PrivateRoute.js"],"names":["PropTypes","connect","Route","Redirect","PrivateRoute","component","Component","auth","loading","isAuthenticated","rest","props","propTypes","object","isRequired","mapStateToProps","state"],"mappings":";AAAA;AACA;AACA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC,C,CAIA;AACA;;;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,IAAI,EAAE;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,GAA9B;AAA0D,KAAGC;AAA7D,CAAD,kBACpB,QAAC,KAAD,OAAWA,IAAX;AAAiB,EAAA,MAAM,EAAEC,KAAK,IAAI,CAACF,eAAD,IAAoB,CAACD,OAArB,gBAAgC,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAhC,gBAA4D,QAAC,SAAD,OAAeG;AAAf;AAAA;AAAA;AAAA;AAAA;AAA9F;AAAA;AAAA;AAAA;AAAA,QADD;;KAAMP,Y;AAKNA,YAAY,CAACQ,SAAb,GAAyB;AACxBL,EAAAA,IAAI,EAAEP,SAAS,CAACa,MAAV,CAAiBC;AADC,CAAzB;;AAIA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCT,EAAAA,IAAI,EAAES,KAAK,CAACT;AADqB,CAAL,CAA7B;;AAIA,eAAeN,OAAO,CAACc,eAAD,CAAP,CAAyBX,YAAzB,CAAf","sourcesContent":["// A function component that checks if user is authenticated\n// Will be used on protected Routes\nimport PropTypes from \"prop-types\"\nimport { connect } from \"react-redux\"\nimport { Route, Redirect } from \"react-router-dom\"\n\n\n\n// Get Component from props\n// ...rest takes anything else passed in \nconst PrivateRoute = ({ component: Component, auth: {loading, isAuthenticated}, ...rest }) => (\n\t<Route {...rest} render={props => !isAuthenticated && !loading ? (<Redirect to=\"/login\" />): (<Component {...props} />)} />\n)\n\n\nPrivateRoute.propTypes = {\n\tauth: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n\tauth: state.auth\n})\n\nexport default connect(mapStateToProps)(PrivateRoute)"]},"metadata":{},"sourceType":"module"}